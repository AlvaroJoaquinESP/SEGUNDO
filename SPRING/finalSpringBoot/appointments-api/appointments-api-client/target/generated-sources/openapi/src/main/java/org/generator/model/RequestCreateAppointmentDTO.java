/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.generator.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * RequestCreateAppointmentDTO
 */
@JsonPropertyOrder({
  RequestCreateAppointmentDTO.JSON_PROPERTY_PATIENT_ID,
  RequestCreateAppointmentDTO.JSON_PROPERTY_DOCTOR_ID,
  RequestCreateAppointmentDTO.JSON_PROPERTY_APPOINTMENT_DATE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-12T23:58:19.133047400+02:00[Europe/Madrid]", comments = "Generator version: 7.10.0")
public class RequestCreateAppointmentDTO implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_PATIENT_ID = "patientId";
  @jakarta.annotation.Nonnull
  private Long patientId;

  public static final String JSON_PROPERTY_DOCTOR_ID = "doctorId";
  @jakarta.annotation.Nonnull
  private Long doctorId;

  public static final String JSON_PROPERTY_APPOINTMENT_DATE = "appointmentDate";
  @jakarta.annotation.Nonnull
  private OffsetDateTime appointmentDate;

  public RequestCreateAppointmentDTO() {
  }

  public RequestCreateAppointmentDTO patientId(@jakarta.annotation.Nonnull Long patientId) {
    
    this.patientId = patientId;
    return this;
  }

  /**
   * Get patientId
   * @return patientId
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PATIENT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getPatientId() {
    return patientId;
  }


  @JsonProperty(JSON_PROPERTY_PATIENT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPatientId(@jakarta.annotation.Nonnull Long patientId) {
    this.patientId = patientId;
  }

  public RequestCreateAppointmentDTO doctorId(@jakarta.annotation.Nonnull Long doctorId) {
    
    this.doctorId = doctorId;
    return this;
  }

  /**
   * Get doctorId
   * @return doctorId
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DOCTOR_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getDoctorId() {
    return doctorId;
  }


  @JsonProperty(JSON_PROPERTY_DOCTOR_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDoctorId(@jakarta.annotation.Nonnull Long doctorId) {
    this.doctorId = doctorId;
  }

  public RequestCreateAppointmentDTO appointmentDate(@jakarta.annotation.Nonnull OffsetDateTime appointmentDate) {
    
    this.appointmentDate = appointmentDate;
    return this;
  }

  /**
   * Get appointmentDate
   * @return appointmentDate
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_APPOINTMENT_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getAppointmentDate() {
    return appointmentDate;
  }


  @JsonProperty(JSON_PROPERTY_APPOINTMENT_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAppointmentDate(@jakarta.annotation.Nonnull OffsetDateTime appointmentDate) {
    this.appointmentDate = appointmentDate;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RequestCreateAppointmentDTO requestCreateAppointmentDTO = (RequestCreateAppointmentDTO) o;
    return Objects.equals(this.patientId, requestCreateAppointmentDTO.patientId) &&
        Objects.equals(this.doctorId, requestCreateAppointmentDTO.doctorId) &&
        Objects.equals(this.appointmentDate, requestCreateAppointmentDTO.appointmentDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(patientId, doctorId, appointmentDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RequestCreateAppointmentDTO {\n");
    sb.append("    patientId: ").append(toIndentedString(patientId)).append("\n");
    sb.append("    doctorId: ").append(toIndentedString(doctorId)).append("\n");
    sb.append("    appointmentDate: ").append(toIndentedString(appointmentDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

