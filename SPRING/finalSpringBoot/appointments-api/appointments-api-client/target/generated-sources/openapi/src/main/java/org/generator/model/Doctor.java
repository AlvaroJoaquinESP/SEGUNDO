/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.generator.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Doctor
 */
@JsonPropertyOrder({
  Doctor.JSON_PROPERTY_ID,
  Doctor.JSON_PROPERTY_NAME,
  Doctor.JSON_PROPERTY_SPECIALITY,
  Doctor.JSON_PROPERTY_DNI,
  Doctor.JSON_PROPERTY_EMAIL
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-12T23:58:19.133047400+02:00[Europe/Madrid]", comments = "Generator version: 7.10.0")
public class Doctor implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_ID = "id";
  @jakarta.annotation.Nullable
  private Long id;

  public static final String JSON_PROPERTY_NAME = "name";
  @jakarta.annotation.Nullable
  private String name;

  /**
   * Gets or Sets speciality
   */
  public enum SpecialityEnum {
    CARDIOLOGY(String.valueOf("CARDIOLOGY")),
    
    PEDIATRICS(String.valueOf("PEDIATRICS")),
    
    DERMATOLOGY(String.valueOf("DERMATOLOGY")),
    
    NEUROLOGY(String.valueOf("NEUROLOGY"));

    private String value;

    SpecialityEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SpecialityEnum fromValue(String value) {
      for (SpecialityEnum b : SpecialityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SPECIALITY = "speciality";
  @jakarta.annotation.Nullable
  private SpecialityEnum speciality;

  public static final String JSON_PROPERTY_DNI = "dni";
  @jakarta.annotation.Nullable
  private String dni;

  public static final String JSON_PROPERTY_EMAIL = "email";
  @jakarta.annotation.Nullable
  private String email;

  public Doctor() {
  }

  public Doctor id(@jakarta.annotation.Nullable Long id) {
    
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(@jakarta.annotation.Nullable Long id) {
    this.id = id;
  }

  public Doctor name(@jakarta.annotation.Nullable String name) {
    
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(@jakarta.annotation.Nullable String name) {
    this.name = name;
  }

  public Doctor speciality(@jakarta.annotation.Nullable SpecialityEnum speciality) {
    
    this.speciality = speciality;
    return this;
  }

  /**
   * Get speciality
   * @return speciality
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SPECIALITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SpecialityEnum getSpeciality() {
    return speciality;
  }


  @JsonProperty(JSON_PROPERTY_SPECIALITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSpeciality(@jakarta.annotation.Nullable SpecialityEnum speciality) {
    this.speciality = speciality;
  }

  public Doctor dni(@jakarta.annotation.Nullable String dni) {
    
    this.dni = dni;
    return this;
  }

  /**
   * Get dni
   * @return dni
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DNI)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDni() {
    return dni;
  }


  @JsonProperty(JSON_PROPERTY_DNI)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDni(@jakarta.annotation.Nullable String dni) {
    this.dni = dni;
  }

  public Doctor email(@jakarta.annotation.Nullable String email) {
    
    this.email = email;
    return this;
  }

  /**
   * Get email
   * @return email
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EMAIL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEmail() {
    return email;
  }


  @JsonProperty(JSON_PROPERTY_EMAIL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEmail(@jakarta.annotation.Nullable String email) {
    this.email = email;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Doctor doctor = (Doctor) o;
    return Objects.equals(this.id, doctor.id) &&
        Objects.equals(this.name, doctor.name) &&
        Objects.equals(this.speciality, doctor.speciality) &&
        Objects.equals(this.dni, doctor.dni) &&
        Objects.equals(this.email, doctor.email);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, speciality, dni, email);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Doctor {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    speciality: ").append(toIndentedString(speciality)).append("\n");
    sb.append("    dni: ").append(toIndentedString(dni)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

