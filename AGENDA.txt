HACER ACTIVIDADES DISEÑO T1 

ver css todocode y cursos juan para este fin de semana.

terminar 9.13 cliente

terminar practica8 lazaro()

practica 4.5 marcas()

public apis y devchallenges cliente()

express cliente()

escrituras siempre com put en firebase

copiar snippets para clase

--npm init -y para que no me pregunte 20 cosas--
el bundler que vamos a utilizar va a ser PARCEL (Se encarga de bundling(hacer el código más legible a la página web)). npm i parcel
--Para hacerlo como una dependencia obligatoria ponemos: npm i -D parcel--
Además de npm i -D parcel bundler

--

1º -Carpeta
2º -npm init -y (package.json)
2.º- SI NO LO TENGO INSTALADO, HAGO NPM -I PARCEL	
2º -npm i -D parcel
3º -npm i -D parcel-bundler
4º -Con el 2º y 3er paso se ha modificado el package.json
5º -SI SUBO EL PROYECTO A ALGUN LADO, GITHUB O LO QUE SEA, TENGO QUE BORRAR LA CARPETA NODE_MODULES SI O SI. --JAMÁS ENTREGARLA EN UN EXAMEN NI NINGÚN LADO--
6º -PARA RECUPERAR LA CARPETA Y PODER ABRIR EL ARCHIVO EN OTRO ORDENADOR O DONDE SEA, ABRIMOS UN CMD EN ESE PROYECTO Y HACEMOS -- NPM I --
7º -En frontend, la tendencia es que el código se meta en una carpeta "src", por tanto, creamos la carpeta, y, a su vez, tendremos las carpetas separadas por extensión. Por ello, dentro de la carpeta "src" crearemos 3 carpetas: "js", "assets" para imágenes, vídeos y demás contenido gráfico y "css". LOS FICHEROS HTML IRAN DENTRO DE LA CARPETA "SRC" --siempre crearé un archivo index.html--


**********

Lo siguiente es modificar el package.json, cambiando la línea main por source, y dirigiéndola al index.html con src/index.html.
--
En los scripts tendremos 2: dev parcel --open , build parcel build, además de test que ya está.
--
Para ejecutar los cambios, vamos a la terminal y ponemos: npm run dev. Con esto me va a montar un servidos local para poder ejecutar mi aplicación.

Al ejecutar npm run dev, nos crea una carpeta "dist", que nos permite tenerlo en local, Para ponerlo en la web para que piensen que sabemos programar jeje haremos npm run build.

Investigar el npm.c del tema 11.
*********



REACT 

CON CREATE REACT APP.

1º npx create-react-app nombreCarpetaConProyectoReact (Crear el proyecyo react). 

2º para solucionar los errores que genera, hacemos: npm i web-vitals, dentro de la carpeta que hemos creado. 

3º para poder ejecutar las aplicaciones con cra usamos: npm start

4º una vez hecho esto, se nos abre en el navegador.

5º en la carpeta src, los archivos app.js y app.css son lo que llamamos un COMPONENTE. cada componente va a tener dos ficheros, o uno.

 
CON VITE 

1º npm create vite@latest

2º en el placeholder ponemos el nombre del proyecto.

3º elegimos el framework o librería, en nuestro caso react.

4º elegimos como lenguaje js + swc

5º hacemos los pasos que nos muestra la consola. 1º cd proyecto 2º npm i 3º npm run dev

6º se nos despliega nuestro proyecto copiando la url y pegándola en el navegador.

7º en este caso, el componente principal se llama APP.JSX Y APP.CSS. 

8º tampoco hay index.js

9º con vite utilizamos la versión 18.3 de react, en cra usamos la 19.0, por eso nos da el fallo.


PARA MOVER O ENTREGAR LOS PROYECTOS --NO ENTREGAMOS LA CARPETA NODE-NODULES--.

para ello, usamos el comando que hay en el aula virtual.


-- BOOTSTRAP.

1º para añadir Bootstrap tengo que hacer 2 imports en el fichro app.jsx

2º instalo Bootstrap con npm i Bootstrap lo primero de todo

3º compruebo que se ha añadido en el package.json

4º importo el css y el js con los snippets del av.

5º compruebo que funciona con la prueba de fuego: <button className="btn btn-primary">Click me</button>

6º inicio el servidor y compruebo


-- SEGUIMOS CON REACT.

Imaginemos que tenemos un array y lo queremos mostrar en el return de app.jsx:

1º Para ello vamos a utilizar el método .map, muy parecido a recorrer el array con un foreach. No podemos usar for...of.

2º   ver la clase del 15/01 en el min 35 aprox.

3º cuando recorro objetos con .map en react, NO ES necesario utilizar índice, en caambio, puedo utilizar la pk del objeto como muestro en el ejercico 15.4.

4º para comparar algo se utilizan 3 ===


-- BORRAR NODE MODULES TERMINAL
FOR /d /r . %d in (node_modules) DO @IF EXIST "%d" rd /s /q "%d"



-- spring initializr


-- PREGUNTAS JUAN --
- ¿El editar siempre lo vamos a poner con <Link />?
- ¿El editar siempre lo vamos a hacer eliminando y agregando en la funcion?
- ¿Puedo evitar que se vea el id en la ruta al editar?



-Diferencias entre el dispatch en los onclick, (o siempre) entre el useReducer y el redux toolkit.
En useReducer se utiliza onClick = {() => dispatch(type: nombrefuncionEnApp, payload: pk)}

Y en Redux Toolkit se utiliza onClick = {() => dispatch(nombreFuncionSlice(pk))}

-Para redux, en el slice recibe un state y un action, pero en el onClick solo recibe un action. ¿Es correcto?

- Los reducers de redux, ¿siempre van a recibir lo mismo? Es decir, state y action.

- Cuando en añadir, sea donde sea(context, reducer o redux), monto el objeto, el nombre de los campos que monte deben de ser iguales al array, firebase, o donde sea que los recoja. ¿Verdad?


- Para el notFound tuve que importar la imagen.

- ¿Cuándo usar find y cuando filter?
- ¿Find solo en editar?

- Ver la desestructuración con Juan en el final1(EditEvento.jsx).

- ¿Diferencia entre los snippet reducer y rutaReducer?

- ¿En cuales uso state? Solo en el reducer y en reduxToolkit

- ¿Donde uso useEffect?

